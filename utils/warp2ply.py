#!/usr/bin/python

import sys
import logging
import argparse
import numpy as np

logger = logging.getLogger(__name__)
plyheader = """
ply
format ascii 1.0
comment Generated by ScreenWarp
element vertex {0}
property float x
property float y
property float z
property float u
property float v
property float t
property uchar red
property uchar green
property uchar blue
element face {1}
property list uchar int vertex_indices
end_header
"""

def parse_cmdline():
    parser = argparse.ArgumentParser(description='''
        TODO: insert description.'''
    )
    parser.add_argument('-v', '--verbose', action='store_true', help="Enable verbose output")
    parser.add_argument('-q', '--quiet', action='store_true', help="Output errors only")
    parser.add_argument('infile', help="Warp file to convert")
    parser.add_argument('outfile', help="AC3D output file")
    args = parser.parse_args()

    if args.verbose: loglevel = logging.DEBUG
    elif args.quiet: loglevel = logging.ERROR
    else:            loglevel = logging.INFO

    logging.basicConfig(level=loglevel, format='%(asctime)s %(levelname)s %(message)s')

    return args

def main():
    args = parse_cmdline()

    with open(args.infile) as wf:
        s, v, r, c, xs_flip, ys_flip, xd_flip, yd_flip = wf.readline().split()
        if s != 'screenwarp':
            raise Exception("File {0} does not start with 'screenwarp'", args.infile1)
        rows = int(r)
        cols = int(c)

        vertices = np.empty((rows, cols, 2), np.float32)
        texcoords =  np.empty((rows, cols, 2), np.float32)
        intensities = {}

        with open(args.outfile, 'w+') as of:
            # write headers
            of.write(plyheader.format(rows * cols, (rows-1)*(cols-1)*2).lstrip())
            for r in range(rows-1, -1, -1):
                for c in range(cols):
                    l = wf.readline().split()
                    if xs_flip == "1": l[0] = 1 - l[0]
                    if ys_flip == "1": l[1] = 1 - l[1]
                    if xd_flip == "1": l[2] = 1 - l[2]
                    if yd_flip == "1": l[3] = 1 - l[3]

                    # write vertex elements
                    of.write("{0} {1} 0.0 {2} {3} {4} {5} {5} {5}\n".format(float(l[0]), float(l[1]), float(l[2]), float(l[3]), float(l[4]), int(float(l[4])*255)))

            for r in range(rows-1):
                for c in range(cols-1):
                    i1 = c+(r+1)*cols;
                    i2 = c+(r)*cols;
                    i3 = c+1+(r)*cols;
                    i4 = c+1+(r+1)*cols;

                    # write two triangle face elements for each square
                    of.write("3 {0} {1} {2}\n".format(i1, i2, i3))
                    of.write("3 {0} {1} {2}\n".format(i1, i3, i4))

    sys.exit(0)


# call main()
if __name__ == '__main__':
    main()
